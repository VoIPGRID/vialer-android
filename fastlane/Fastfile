ensure_bundle_exec
update_fastlane
ensure_git_status_clean
default_platform(:android)

platform :android do

 flavors = ["vialer", "voys", "verbonden", "annabel"]

  before_all do
    gradle(
      task: 'clean',
      print_command: false,
      print_command_output: false
    )
  end

  desc 'Generate a signed APK'
  lane :apk do |options|
    flavor = options[:flavor]

    if (flavor == "all" || flavor.nil? || flavor.empty?)
        apks
        next
    end

    puts "Building .apk for #{flavor}"

    gradle(
      task: 'assemble',
      flavor: flavor,
      build_type: 'Release',
      print_command: true,
      print_command_output: true
    )
    apk_path = rename_apk(lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH], flavor)
    notify(flavor, apk_path)
  end

  desc 'Generate a signed APK for each flavor'
  lane :apks do |options|
    flavors.each do |flavor|
         options[:flavor] = flavor
         apk(options)
    end
  end

end

# Generates a new filename for the apk and then renames the apk to this, the new file path is then
# returned.
def rename_apk(old_path, flavor)
    fl = flavor.downcase
    time = Time.new.strftime("%m%d%Y_%H%M%S")
    code = get_version_code()
    version = get_version_name().gsub('\.', '_').gsub(' ', '_')
    new_file_name = "#{fl}-#{version}-#{code}-#{time}.apk"
    apk_location_new = old_path.gsub("app-#{fl}-release.apk", new_file_name)
    sh("mv #{old_path} #{apk_location_new}", log: false)
    return apk_location_new
end

# Notify the user that this apk has finished building
def notify(flavor, apk_path)
    puts apk_path
    flavor_dir = flavor == "vialer" ? "main" : flavor
    image_path = "app/src/#{flavor_dir}/res/drawable-hdpi/ic_logo.png"
    notification(
        open:"file://" + apk_path.gsub(File.basename(apk_path), ''),
        message: "Finished building apk for #{flavor}",
        app_icon: image_path,
        content_image: image_path
   )
end